// Prisma Schema for Cloud Dev Platform
// 基于云计算的开发协作平台

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// 枚举定义
// ============================================

enum UserRole {
  USER // 普通用户
  SUPER_ADMIN // 超级管理员
}

enum ProjectVisibility {
  PUBLIC // 公开
  PRIVATE // 私有
}

enum MemberRole {
  OWNER // 所有者
  MAINTAINER // 维护者（可管理项目设置、审核PR）
  MEMBER // 成员（可读写代码）
  VIEWER // 查看者（只读）
}

enum RaftNodeState {
  FOLLOWER // 跟随者
  CANDIDATE // 候选人
  LEADER // 领导者
}

enum IssueState {
  OPEN // 开放状态
  CLOSED // 已关闭
}

enum MilestoneState {
  OPEN // 进行中
  CLOSED // 已完成
}

enum PRState {
  OPEN // 开放状态
  MERGED // 已合并
  CLOSED // 已关闭
}

enum ReviewState {
  APPROVED // 批准
  CHANGES_REQUESTED // 请求修改
  COMMENTED // 仅评论
}

enum MergeStrategy {
  MERGE // 标准merge commit (保留完整历史)
  SQUASH // Squash merge (压缩成单个commit)
  REBASE // Rebase merge (线性历史)
}

enum OrgRole {
  OWNER // 组织所有者（最高权限）
  ADMIN // 组织管理员（可管理成员和设置）
  MEMBER // 组织成员（基础权限）
}

enum TeamRole {
  MAINTAINER // 团队维护者（可管理团队和分配权限）
  MEMBER // 团队成员（继承团队权限）
}

enum IndexStatus {
  PENDING     // 等待索引
  INDEXING    // 索引中
  INDEXED     // 已索引
  FAILED      // 索引失败
  OUTDATED    // 已过期（文件有新提交）
}

// ============================================
// 用户模块
// ============================================

model User {
  id           String   @id @default(cuid())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @db.VarChar(255)
  avatar       String?  @db.VarChar(500)
  bio          String?  @db.Text
  role         UserRole @default(USER)
  isActive     Boolean  @default(true) // 账户是否激活（封禁功能）

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  ownedProjects          Project[]               @relation("ProjectOwner")
  projectMembers         ProjectMember[]
  commits                Commit[]
  uploadedFiles          ProjectFile[]
  organizationMembers    OrganizationMember[]
  teamMembers            TeamMember[]
  authoredIssues         Issue[]                 @relation("IssueAuthor")
  issueComments          IssueComment[]          @relation("IssueCommentAuthor")
  issueEvents            IssueEvent[]            @relation("IssueEventActor")
  authoredPRs            PullRequest[]           @relation("PRAuthor")
  mergedPRs              PullRequest[]           @relation("PRMerger")
  prReviews              PRReview[]
  prComments             PRComment[]
  prEvents               PREvent[]
  notifications          Notification[] // 用户接收的通知
  notificationPreference NotificationPreference? // 用户通知偏好设置（1:1关系）

  @@index([email])
  @@index([username])
  @@map("users")
}

// ============================================
// 组织与团队模块
// ============================================

model Organization {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  slug        String  @unique @db.VarChar(100)
  description String? @db.Text
  avatar      String? @db.VarChar(500)
  website     String? @db.VarChar(500)

  // 资源配额
  maxProjects  Int    @default(1000)
  maxMembers   Int    @default(1000)
  storageQuota BigInt @default(107374182400) // 100GB default
  storageUsed  BigInt @default(0)

  // 个人组织标识（用于数据迁移时区分个人项目组织）
  isPersonal Boolean @default(false)

  // 软删除支持（30天保护期）
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // 关系
  members  OrganizationMember[]
  teams    Team[]
  projects Project[]

  @@index([slug])
  @@index([deletedAt])
  @@index([createdAt])
  @@map("organizations")
}

model OrganizationMember {
  id             String  @id @default(cuid())
  organizationId String
  userId         String
  role           OrgRole @default(MEMBER)

  joinedAt DateTime @default(now())

  // 关系
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([role])
  @@map("organization_members")
}

model Team {
  id             String  @id @default(cuid())
  organizationId String
  name           String  @db.VarChar(100)
  slug           String  @db.VarChar(100)
  description    String? @db.Text
  avatar         String? @db.VarChar(500)

  // 团队成员配额
  maxMembers Int @default(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  organization       Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members            TeamMember[]
  projectPermissions TeamProjectPermission[]

  @@unique([organizationId, slug])
  @@index([slug])
  @@map("teams")
}

model TeamMember {
  id     String   @id @default(cuid())
  teamId String
  userId String
  role   TeamRole @default(MEMBER)

  joinedAt DateTime @default(now())

  // 关系
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
  @@index([role])
  @@map("team_members")
}

model TeamProjectPermission {
  id        String     @id @default(cuid())
  teamId    String
  projectId String
  role      MemberRole // 复用项目角色：OWNER/MAINTAINER/MEMBER/VIEWER

  createdAt DateTime @default(now())

  // 关系
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([teamId, projectId])
  @@index([projectId])
  @@map("team_project_permissions")
}

// ============================================
// 项目模块
// ============================================

model Project {
  id             String            @id @default(cuid())
  name           String            @db.VarChar(100)
  description    String?           @db.Text
  visibility     ProjectVisibility @default(PRIVATE)
  ownerId        String
  organizationId String?

  // 项目设置功能字段
  defaultBranch  String?   @default("main") @db.VarChar(100)
  isArchived     Boolean   @default(false)
  archivedAt     DateTime?

  // PR Approval Settings
  requireApprovals       Int     @default(1)
  allowSelfMerge         Boolean @default(true)
  requireReviewFromOwner Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  owner           User                    @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  organization    Organization?           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository      Repository?
  members         ProjectMember[]
  projectFiles    ProjectFile[]
  teamPermissions TeamProjectPermission[]
  issues          Issue[]
  labels                Label[]
  milestones            Milestone[]
  pullRequests          PullRequest[]
  branchProtectionRules BranchProtectionRule[]
  searchMetadata        SearchMetadata[]  // Code Search索引元数据

  @@unique([ownerId, name])
  @@unique([organizationId, name])
  @@index([visibility])
  @@map("projects")
}

model ProjectMember {
  id        String     @id @default(cuid())
  projectId String
  userId    String
  role      MemberRole @default(MEMBER)

  joinedAt DateTime @default(now())

  // 关系
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

// ============================================
// 仓库模块
// ============================================

model Repository {
  id            String @id @default(cuid())
  projectId     String @unique
  defaultBranch String @default("main") @db.VarChar(100)
  storageUsed   BigInt @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  branches Branch[]
  commits  Commit[]
  files    File[]
  searchMetadata SearchMetadata[]  // Code Search索引元数据

  @@index([projectId])
  @@map("repositories")
}

model Branch {
  id           String  @id @default(cuid())
  repositoryId String
  name         String  @db.VarChar(100)
  commitId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  commit     Commit?    @relation("BranchCommit", fields: [commitId], references: [id], onDelete: SetNull)
  commits    Commit[]   @relation("BranchCommits")
  files      File[]

  @@unique([repositoryId, name])
  @@index([commitId])
  @@map("branches")
}

model Commit {
  id           String  @id @default(cuid())
  repositoryId String
  branchId     String
  authorId     String
  message      String  @db.Text
  hash         String  @default(cuid()) @db.VarChar(64)
  parentHash   String? @db.VarChar(64)

  createdAt DateTime @default(now())

  // 关系
  repository  Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  branch      Branch     @relation("BranchCommits", fields: [branchId], references: [id], onDelete: Cascade)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  files       File[]
  branchHeads Branch[]   @relation("BranchCommit")

  @@index([repositoryId])
  @@index([branchId])
  @@index([authorId])
  @@index([hash])
  @@index([createdAt])
  @@map("commits")
}

model File {
  id           String  @id @default(cuid())
  repositoryId String
  branchId     String
  commitId     String?
  path         String  @db.VarChar(500)
  objectName   String  @db.VarChar(1000) // MinIO对象名称
  size         Int
  mimeType     String  @db.VarChar(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  branch     Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  commit     Commit?    @relation(fields: [commitId], references: [id], onDelete: SetNull)

  // Code Search索引元数据（可选关系）
  searchMetadata SearchMetadata?

  @@unique([repositoryId, branchId, path])
  @@index([branchId])
  @@index([commitId])
  @@index([path])
  @@map("files")
}

// ============================================
// Code Search 模块
// ============================================

model SearchMetadata {
  id           String      @id @default(cuid())
  fileId       String      @unique  // 关联到File表
  projectId    String
  repositoryId String

  // 索引状态
  status       IndexStatus @default(PENDING)
  indexedAt    DateTime?   // 上次索引时间
  failureReason String?    @db.Text  // 失败原因
  retryCount   Int         @default(0)  // 重试次数

  // 文件快照（用于检测变化）
  lastCommitId String?     @db.VarChar(64)
  contentHash  String?     @db.VarChar(64)  // SHA256 hash

  // 索引统计
  symbolCount  Int         @default(0)  // 代码符号数量
  lineCount    Int         @default(0)  // 总行数

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // 关系
  file       File       @relation(fields: [fileId], references: [id], onDelete: Cascade)
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([repositoryId])
  @@index([status])
  @@index([indexedAt])
  @@map("search_metadata")
}

// ============================================
// Raft 分布式共识模块
// ============================================

model RaftLog {
  id        String @id @default(cuid())
  index     Int    @unique
  term      Int
  command   String @db.Text
  timestamp BigInt

  createdAt DateTime @default(now())

  @@index([index])
  @@index([term])
  @@index([createdAt])
  @@map("raft_logs")
}

model RaftState {
  id          String        @id @default(cuid())
  nodeId      String        @unique @db.VarChar(50)
  currentTerm Int           @default(0)
  votedFor    String?       @db.VarChar(50)
  state       RaftNodeState @default(FOLLOWER)
  leaderId    String?       @db.VarChar(50)
  commitIndex Int           @default(0)
  lastApplied Int           @default(0)

  updatedAt DateTime @updatedAt

  @@index([nodeId])
  @@map("raft_state")
}

// ============================================
// 项目文件管理模块
// ============================================

model ProjectFile {
  id         String  @id @default(cuid())
  projectId  String
  name       String  @db.VarChar(255)
  path       String  @db.VarChar(1000) // MinIO中的对象路径
  size       Int
  mimeType   String  @db.VarChar(100)
  type       String  @db.VarChar(10) // 'file' or 'folder'
  folder     String? @db.VarChar(500) // 所属文件夹路径
  uploadedBy String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploader User    @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([uploadedBy])
  @@index([folder])
  @@index([type])
  @@map("project_files")
}

// ============================================
// Issue 追踪系统模块
// ============================================

model Issue {
  id        String     @id @default(cuid())
  projectId String
  number    Int // 项目内唯一编号（自增）
  title     String     @db.VarChar(500)
  body      String?    @db.Text
  state     IssueState @default(OPEN)
  authorId  String

  // 关联关系（多对多）
  assigneeIds  String[] // 分配给的用户ID数组
  labelIds     String[] // 标签ID数组
  milestoneId  String?

  closedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // 关系
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author    User           @relation("IssueAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  milestone Milestone?     @relation(fields: [milestoneId], references: [id], onDelete: SetNull)
  comments  IssueComment[]
  events    IssueEvent[]

  @@unique([projectId, number])
  @@index([authorId])
  @@index([state])
  @@index([milestoneId])
  @@index([createdAt])
  @@map("issues")
}

model Label {
  id          String  @id @default(cuid())
  projectId   String
  name        String  @db.VarChar(50)
  color       String  @db.VarChar(7) // Hex color (#RRGGBB)
  description String? @db.VarChar(200)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@map("labels")
}

model Milestone {
  id          String         @id @default(cuid())
  projectId   String
  title       String         @db.VarChar(200)
  description String?        @db.Text
  dueDate     DateTime?
  state       MilestoneState @default(OPEN)
  closedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issues  Issue[]

  @@unique([projectId, title])
  @@index([state])
  @@index([dueDate])
  @@map("milestones")
}

model IssueComment {
  id       String @id @default(cuid())
  issueId  String
  authorId String
  body     String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  issue  Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author User  @relation("IssueCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@index([authorId])
  @@index([createdAt])
  @@map("issue_comments")
}

model IssueEvent {
  id       String   @id @default(cuid())
  issueId  String
  actorId  String
  event    String   @db.VarChar(50) // 事件类型：opened, closed, reopened, assigned, labeled, etc.
  metadata Json? // 事件相关元数据

  createdAt DateTime @default(now())

  // 关系
  issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  actor User  @relation("IssueEventActor", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@index([actorId])
  @@index([event])
  @@index([createdAt])
  @@map("issue_events")
}

// ============================================
// Pull Request 系统模块
// ============================================

model PullRequest {
  id           String  @id @default(cuid())
  projectId    String
  number       Int // 项目内唯一编号（自增）
  title        String  @db.VarChar(500)
  body         String? @db.Text
  sourceBranch String  @db.VarChar(100)
  targetBranch String  @db.VarChar(100)
  state        PRState @default(OPEN)
  authorId     String

  // 合并相关
  mergedAt      DateTime?
  mergedBy      String?
  mergeCommit   String?        @db.VarChar(64) // 合并后生成的 commit hash
  mergeStrategy MergeStrategy? // 使用的合并策略

  closedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // 关系
  project  Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author   User       @relation("PRAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  merger   User?      @relation("PRMerger", fields: [mergedBy], references: [id], onDelete: SetNull)
  reviews  PRReview[]
  comments PRComment[]
  events   PREvent[]

  @@unique([projectId, number])
  @@index([projectId])
  @@index([authorId])
  @@index([state])
  @@index([createdAt])
  @@map("pull_requests")
}

model PRReview {
  id            String      @id @default(cuid())
  pullRequestId String
  reviewerId    String
  state         ReviewState
  body          String?     @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  pullRequest PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  reviewer    User        @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([pullRequestId])
  @@index([reviewerId])
  @@index([state])
  @@map("pr_reviews")
}

model PRComment {
  id            String  @id @default(cuid())
  pullRequestId String
  authorId      String
  body          String  @db.Text
  filePath      String? @db.VarChar(500) // For line-level comments
  lineNumber    Int? // For line-level comments
  commitHash    String? @db.VarChar(64) // 锁定到特定 commit，防止 diff 变化后行号错位

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  pullRequest PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([pullRequestId])
  @@index([authorId])
  @@index([createdAt])
  @@map("pr_comments")
}

model PREvent {
  id            String   @id @default(cuid())
  pullRequestId String
  actorId       String
  event         String   @db.VarChar(50) // 事件类型：opened, closed, merged, reviewed, etc.
  metadata      Json? // 事件相关元数据

  createdAt DateTime @default(now())

  // 关系
  pullRequest PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  actor       User        @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@index([pullRequestId])
  @@index([actorId])
  @@index([event])
  @@index([createdAt])
  @@map("pr_events")
}

// ============================================
// 通知系统模块
// ============================================

/**
 * 通知类型枚举
 *
 * 支持的通知场景：
 * - Pull Request相关：创建、合并、关闭、审查、评论
 * - Issue相关：提及、分配、评论
 */
enum NotificationType {
  PR_CREATED       // PR被创建
  PR_MERGED        // PR被合并
  PR_CLOSED        // PR被关闭
  PR_REVIEWED      // PR被审查
  PR_COMMENTED     // PR被评论
  ISSUE_MENTIONED  // 在Issue中被提及
  ISSUE_ASSIGNED   // 被分配到Issue
  ISSUE_COMMENTED  // Issue被评论
}

/**
 * 通知表
 *
 * 存储所有用户通知记录
 *
 * ECP-C3: Performance Awareness - 添加索引优化查询
 * - userId: 按用户查询未读通知
 * - read: 快速过滤已读/未读
 * - createdAt: 时间排序
 */
model Notification {
  id        String           @id @default(cuid())
  userId    String           // 通知接收者
  type      NotificationType // 通知类型
  title     String           @db.VarChar(200) // 通知标题
  body      String?          @db.Text // 通知内容（支持Markdown）
  read      Boolean          @default(false) // 是否已读
  link      String?          @db.VarChar(500) // 相关资源链接（如PR详情页）
  metadata  Json? // 额外元数据（PR ID、Issue ID、评论内容等）

  createdAt DateTime @default(now())

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([userId, read]) // 复合索引：查询特定用户的未读通知
  @@map("notifications")
}

/**
 * 通知偏好设置表
 *
 * 用户可自定义接收哪些类型的通知
 *
 * ECP-A1: SOLID - 单一职责原则
 * - 每个用户一条配置记录（1:1关系）
 */
model NotificationPreference {
  id     String @id @default(cuid())
  userId String @unique // 用户ID（唯一）

  // PR通知开关
  prCreated   Boolean @default(true) // PR创建通知
  prMerged    Boolean @default(true) // PR合并通知
  prReviewed  Boolean @default(true) // PR审查通知
  prCommented Boolean @default(true) // PR评论通知

  // Issue通知开关
  issueMentioned Boolean @default(true) // Issue提及通知
  issueAssigned  Boolean @default(true) // Issue分配通知
  issueCommented Boolean @default(true) // Issue评论通知

  // 邮件通知（暂未实现，预留字段）
  emailNotifications Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

// ============================================
// 分支保护规则模块
// ============================================

/**
 * 分支保护规则表
 *
 * 为项目的特定分支配置保护策略，防止未经审核的代码合并
 *
 * MVP功能：
 * - 要求PR审核才能合并
 * - 设置最少审核人数
 * - 禁止直接推送到保护分支
 *
 * 后续扩展：
 * - 分支模式匹配（通配符支持）
 * - CI/CD状态检查集成
 * - Code Owner审查要求
 */
model BranchProtectionRule {
  id        String  @id @default(cuid())
  projectId String

  // 保护的分支名称（MVP: 精确匹配，如 "main", "develop"）
  branchPattern String @db.VarChar(100)

  // 核心保护规则
  requirePullRequest       Boolean @default(true)  // 必须通过PR修改（不能直接push）
  requiredApprovingReviews Int     @default(1)     // 最少批准审核数量
  dismissStaleReviews      Boolean @default(false) // 新提交后作废旧审查
  requireCodeOwnerReview   Boolean @default(false) // 要求Code Owner审查

  // 高级保护选项
  allowForcePushes Boolean @default(false) // 允许强制推送（危险操作）
  allowDeletions   Boolean @default(false) // 允许删除保护分支

  // 状态检查（CI/CD集成，Phase 2功能，暂时保留字段）
  requireStatusChecks  Boolean  @default(false) // 要求状态检查通过
  requiredStatusChecks String[] // 必须通过的检查项 ["ci", "tests", "build"]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, branchPattern]) // 每个项目的每个分支只能有一条保护规则
  @@index([projectId])
  @@map("branch_protection_rules")
}
