// Prisma Schema for Cloud Dev Platform
// 基于云计算的开发协作平台

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// 枚举定义
// ============================================

enum UserRole {
  USER // 普通用户
  SUPER_ADMIN // 超级管理员
}

enum ProjectVisibility {
  PUBLIC // 公开
  PRIVATE // 私有
}

enum MemberRole {
  OWNER // 所有者
  MAINTAINER // 维护者（可管理项目设置、审核PR）
  MEMBER // 成员（可读写代码）
  VIEWER // 查看者（只读）
}

enum RaftNodeState {
  FOLLOWER // 跟随者
  CANDIDATE // 候选人
  LEADER // 领导者
}

enum IssueState {
  OPEN // 开放状态
  CLOSED // 已关闭
}

enum MilestoneState {
  OPEN // 进行中
  CLOSED // 已完成
}

enum OrgRole {
  OWNER // 组织所有者（最高权限）
  ADMIN // 组织管理员（可管理成员和设置）
  MEMBER // 组织成员（基础权限）
}

enum TeamRole {
  MAINTAINER // 团队维护者（可管理团队和分配权限）
  MEMBER // 团队成员（继承团队权限）
}

// ============================================
// 用户模块
// ============================================

model User {
  id           String   @id @default(cuid())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @db.VarChar(255)
  avatar       String?  @db.VarChar(500)
  bio          String?  @db.Text
  role         UserRole @default(USER)
  isActive     Boolean  @default(true) // 账户是否激活（封禁功能）

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  ownedProjects       Project[]            @relation("ProjectOwner")
  projectMembers      ProjectMember[]
  commits             Commit[]
  uploadedFiles       ProjectFile[]
  organizationMembers OrganizationMember[]
  teamMembers         TeamMember[]
  authoredIssues      Issue[]              @relation("IssueAuthor")
  issueComments       IssueComment[]       @relation("IssueCommentAuthor")
  issueEvents         IssueEvent[]         @relation("IssueEventActor")

  @@index([email])
  @@index([username])
  @@map("users")
}

// ============================================
// 组织与团队模块
// ============================================

model Organization {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  slug        String  @unique @db.VarChar(100)
  description String? @db.Text
  avatar      String? @db.VarChar(500)
  website     String? @db.VarChar(500)

  // 资源配额
  maxProjects  Int    @default(1000)
  maxMembers   Int    @default(1000)
  storageQuota BigInt @default(107374182400) // 100GB default
  storageUsed  BigInt @default(0)

  // 个人组织标识（用于数据迁移时区分个人项目组织）
  isPersonal Boolean @default(false)

  // 软删除支持（30天保护期）
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // 关系
  members  OrganizationMember[]
  teams    Team[]
  projects Project[]

  @@index([slug])
  @@index([deletedAt])
  @@index([createdAt])
  @@map("organizations")
}

model OrganizationMember {
  id             String  @id @default(cuid())
  organizationId String
  userId         String
  role           OrgRole @default(MEMBER)

  joinedAt DateTime @default(now())

  // 关系
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@index([role])
  @@map("organization_members")
}

model Team {
  id             String  @id @default(cuid())
  organizationId String
  name           String  @db.VarChar(100)
  slug           String  @db.VarChar(100)
  description    String? @db.Text
  avatar         String? @db.VarChar(500)

  // 团队成员配额
  maxMembers Int @default(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  organization       Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members            TeamMember[]
  projectPermissions TeamProjectPermission[]

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([slug])
  @@map("teams")
}

model TeamMember {
  id     String   @id @default(cuid())
  teamId String
  userId String
  role   TeamRole @default(MEMBER)

  joinedAt DateTime @default(now())

  // 关系
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@index([role])
  @@map("team_members")
}

model TeamProjectPermission {
  id        String     @id @default(cuid())
  teamId    String
  projectId String
  role      MemberRole // 复用项目角色：OWNER/MAINTAINER/MEMBER/VIEWER

  createdAt DateTime @default(now())

  // 关系
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([teamId, projectId])
  @@index([teamId])
  @@index([projectId])
  @@map("team_project_permissions")
}

// ============================================
// 项目模块
// ============================================

model Project {
  id             String            @id @default(cuid())
  name           String            @db.VarChar(100)
  description    String?           @db.Text
  visibility     ProjectVisibility @default(PRIVATE)
  ownerId        String
  organizationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  owner           User                    @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  organization    Organization?           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository      Repository?
  members         ProjectMember[]
  projectFiles    ProjectFile[]
  teamPermissions TeamProjectPermission[]
  issues          Issue[]
  labels          Label[]
  milestones      Milestone[]

  @@unique([ownerId, name])
  @@unique([organizationId, name])
  @@index([ownerId])
  @@index([organizationId])
  @@index([visibility])
  @@map("projects")
}

model ProjectMember {
  id        String     @id @default(cuid())
  projectId String
  userId    String
  role      MemberRole @default(MEMBER)

  joinedAt DateTime @default(now())

  // 关系
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

// ============================================
// 仓库模块
// ============================================

model Repository {
  id            String @id @default(cuid())
  projectId     String @unique
  defaultBranch String @default("main") @db.VarChar(100)
  storageUsed   BigInt @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  branches Branch[]
  commits  Commit[]
  files    File[]

  @@index([projectId])
  @@map("repositories")
}

model Branch {
  id           String  @id @default(cuid())
  repositoryId String
  name         String  @db.VarChar(100)
  commitId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  commit     Commit?    @relation("BranchCommit", fields: [commitId], references: [id], onDelete: SetNull)
  commits    Commit[]   @relation("BranchCommits")
  files      File[]

  @@unique([repositoryId, name])
  @@index([repositoryId])
  @@index([commitId])
  @@map("branches")
}

model Commit {
  id           String  @id @default(cuid())
  repositoryId String
  branchId     String
  authorId     String
  message      String  @db.Text
  hash         String  @default(cuid()) @db.VarChar(64)
  parentHash   String? @db.VarChar(64)

  createdAt DateTime @default(now())

  // 关系
  repository  Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  branch      Branch     @relation("BranchCommits", fields: [branchId], references: [id], onDelete: Cascade)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  files       File[]
  branchHeads Branch[]   @relation("BranchCommit")

  @@index([repositoryId])
  @@index([branchId])
  @@index([authorId])
  @@index([hash])
  @@index([createdAt])
  @@map("commits")
}

model File {
  id           String  @id @default(cuid())
  repositoryId String
  branchId     String
  commitId     String?
  path         String  @db.VarChar(500)
  objectName   String  @db.VarChar(1000) // MinIO对象名称
  size         Int
  mimeType     String  @db.VarChar(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  branch     Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  commit     Commit?    @relation(fields: [commitId], references: [id], onDelete: SetNull)

  @@unique([repositoryId, branchId, path])
  @@index([repositoryId])
  @@index([branchId])
  @@index([commitId])
  @@index([path])
  @@map("files")
}

// ============================================
// Raft 分布式共识模块
// ============================================

model RaftLog {
  id        String @id @default(cuid())
  index     Int    @unique
  term      Int
  command   String @db.Text
  timestamp BigInt

  createdAt DateTime @default(now())

  @@index([index])
  @@index([term])
  @@index([createdAt])
  @@map("raft_logs")
}

model RaftState {
  id          String        @id @default(cuid())
  nodeId      String        @unique @db.VarChar(50)
  currentTerm Int           @default(0)
  votedFor    String?       @db.VarChar(50)
  state       RaftNodeState @default(FOLLOWER)
  leaderId    String?       @db.VarChar(50)
  commitIndex Int           @default(0)
  lastApplied Int           @default(0)

  updatedAt DateTime @updatedAt

  @@index([nodeId])
  @@map("raft_state")
}

// ============================================
// 项目文件管理模块
// ============================================

model ProjectFile {
  id         String  @id @default(cuid())
  projectId  String
  name       String  @db.VarChar(255)
  path       String  @db.VarChar(1000) // MinIO中的对象路径
  size       Int
  mimeType   String  @db.VarChar(100)
  type       String  @db.VarChar(10) // 'file' or 'folder'
  folder     String? @db.VarChar(500) // 所属文件夹路径
  uploadedBy String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploader User    @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([uploadedBy])
  @@index([folder])
  @@index([type])
  @@map("project_files")
}

// ============================================
// Issue 追踪系统模块
// ============================================

model Issue {
  id        String     @id @default(cuid())
  projectId String
  number    Int // 项目内唯一编号（自增）
  title     String     @db.VarChar(500)
  body      String?    @db.Text
  state     IssueState @default(OPEN)
  authorId  String

  // 关联关系（多对多）
  assigneeIds  String[] // 分配给的用户ID数组
  labelIds     String[] // 标签ID数组
  milestoneId  String?

  closedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // 关系
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author    User           @relation("IssueAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  milestone Milestone?     @relation(fields: [milestoneId], references: [id], onDelete: SetNull)
  comments  IssueComment[]
  events    IssueEvent[]

  @@unique([projectId, number])
  @@index([projectId])
  @@index([authorId])
  @@index([state])
  @@index([milestoneId])
  @@index([createdAt])
  @@map("issues")
}

model Label {
  id          String  @id @default(cuid())
  projectId   String
  name        String  @db.VarChar(50)
  color       String  @db.VarChar(7) // Hex color (#RRGGBB)
  description String? @db.VarChar(200)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@index([projectId])
  @@map("labels")
}

model Milestone {
  id          String         @id @default(cuid())
  projectId   String
  title       String         @db.VarChar(200)
  description String?        @db.Text
  dueDate     DateTime?
  state       MilestoneState @default(OPEN)
  closedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issues  Issue[]

  @@unique([projectId, title])
  @@index([projectId])
  @@index([state])
  @@index([dueDate])
  @@map("milestones")
}

model IssueComment {
  id       String @id @default(cuid())
  issueId  String
  authorId String
  body     String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  issue  Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author User  @relation("IssueCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@index([authorId])
  @@index([createdAt])
  @@map("issue_comments")
}

model IssueEvent {
  id       String   @id @default(cuid())
  issueId  String
  actorId  String
  event    String   @db.VarChar(50) // 事件类型：opened, closed, reopened, assigned, labeled, etc.
  metadata Json? // 事件相关元数据

  createdAt DateTime @default(now())

  // 关系
  issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  actor User  @relation("IssueEventActor", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@index([actorId])
  @@index([event])
  @@index([createdAt])
  @@map("issue_events")
}
